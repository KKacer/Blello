@if (!string.IsNullOrWhiteSpace(ImgSrc))
{
<img src="@ImgSrc" onerror="@ImgScript" onloadstart="@ImgScript" hidden />
}
<input id="fu-fileinput" type="file" hidden onchange=@FileInputJS />
<input id="fu-filedata" hidden bind=@FileUpload />
<input id="fu-filename" hidden bind=@FileName />
@functions
{
		[Inject] IJSRuntime jSRuntime { get; set; }
		[Parameter] protected Action<string,string> FileUploaded { get; set; }
		[Parameter] protected string FileName { get; set; }

		string FileUpload
		{
			get => "";
			set => FileUploaded?.Invoke(FileName,value);
		}

		public void TriggerUpload()
		{
			try
			{
				ImgSrc = $"//:0/{DateTime.UtcNow.ToFileTime()}";
				StateHasChanged();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
			}

		}
		string ImgSrc="";
		string ImgScript = "var evt = new MouseEvent('click', {view: window, bubbles: true, cancelable: true});" +
						"this.nextElementSibling.dispatchEvent(evt);" +
						"console.log(this.nextElementSibling);";
		string FileInputJS = "const fdata = this.nextElementSibling;" +
						"console.log(fdata);" +
						"const fname = fdata.nextElementSibling;" +
						"fname.value = this.value;" +
						"console.log(fname.value);" +
						"fname.dispatchEvent(new Event('change'));" +
						"var reader = new FileReader(); " +
						"reader.addEventListener('load', function () { " +
						" fdata.value = this.result; " +
						"console.log('file' + fdata.value);" +
						" fdata.dispatchEvent(new Event('change')); " +
						"}, false); " +
						"reader.readAsText(this.files[0]);";
}