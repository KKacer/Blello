@page "/"
@using Blello.Model
<MastHead DataItems="@boardItems" DataLoaded="@OnFileUpload" Searched="@BoardSearch" />
<BoardInfoBar FileName="@FileName" />
<!-- Lists container -->
<section class="lists-container" onkeypress="@SelectBoard">

	@for (int i = 0; i < boardTitles.Count; i++)
	{
		int board = i + 1;
		<div class="list">

			<DropZone ActiveClass="droptarget" DataItem="board" OnDragDrop=@OnDropBoard OnDragEnter=@OnEnterBoard>
				<DropContent>
					<h3 class="list-title">@boardTitles[board - 1]</h3>
				</DropContent>
			</DropZone>

			<ul class="list-items">
				@foreach (var item in boardItems.Where(b => b.BoardId == board))
				{
					bool highlight = !(string.IsNullOrWhiteSpace(SearchTerm)) && item.Content.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase);
					@if (item.Equals(EditItem))
					{
						<li class="board-edit">
							<textarea id="@item.ItemID" rows="10" class="board-edit-input" onblur="@((e)=>EditAbort(e,item))" bind="@EditChange" aria-label="Edit Card" tabindex="0" />
						</li>
					}
					else
					{
						<Draggable ID="@item.ItemID" IsDragItem=@(item.Equals(DragItem)) DragItemClass="drag-item" DragType="move" DropType="move" DropTargetClass="droptarget" Debug="true" DataItem=@item OnDragStart=@OnDragStart OnDragEnd=@OnDragEnd OnDragDrop=@OnDropItem OnDragEnter=@OnDragEnter OnDragLeave=@OnDragLeave>
							<DragContent Context="dragctx">
								<li class="board-card @((highlight ? "highlight" : ""))" tabindex="@board" onclick="@((e) => EditCard(e, item))" onkeypress="@((e) => EditCard(e, item))">@dragctx.Content</li>
							</DragContent>
						</Draggable>
					}
				}
			</ul>

			@if (NewBoardItem == board)
			{
				<div class="board-new">
					<input id="newcard" type="text" class="board-new-input" bind="@NewItem" placeholder="Add a card" aria-label="New Card" tabindex="@board" />
					<i class="fas fa-plus new-icon"></i>
				</div>
			}
			else
			{
				<button class="add-card-btn btn" onclick="@(()=>AddNewItem(board))" tabindex="@board">Add a card</button>
			}

		</div>
	}


</section>
<!-- End of lists container -->
<Focus FocusElementId="@FocusElementId" FocusChildId="@FocusElementId" />

@functions
{
		[Inject] IJSRuntime jSRuntime { get; set; }
		[Inject] Microsoft.AspNetCore.Components.Services.IUriHelper UriHelper { get; set; }

		void OnFileUpload(string name, IEnumerable<BoardItem> value)
		{
			try
			{
				boardItems = value.ToList();
				FileName = name;
				StateHasChanged();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
			}
		}

		void BoardSearch(string value)
		{
			SearchTerm = value;
			StateHasChanged();
		}
		void SelectBoard(UIKeyboardEventArgs args)
		{
			if (!(EditItem is null) || !(DragItem is null))
			{
				return;
			}
			if (int.TryParse(args.Key, out int board) && board <= boardTitles.Count)
			{
				var item = boardItems.First(b => b.BoardId == board);
				if (!(item is null))
				{
					FocusChildId = item.ItemID;
					FocusElementId = "";
				}
			}
		}
		void EditCard(UIEventArgs args, BoardItem item)
		{
			switch (args)
			{
				case UIMouseEventArgs e:
					EditItem = item;
					FocusElementId = item.ItemID;
					break;
				case UIKeyboardEventArgs k:
					if (k.Key == "Enter" || k.Key == "Space")
					{
						EditItem = item;
						FocusElementId = item.ItemID;
					}
					break;
			}
		}
		string NewItem
		{
			get => "";
			set
			{
				var newItem = new BoardItem() { BoardId = NewBoardItem, Content = value };
				boardItems.Add(newItem);
				NewBoardItem = 0;
				FocusChildId = newItem.ItemID;
				FocusElementId = "";
			}
		}

		string EditChange
		{
			get => EditItem.Content;
			set
			{
				EditItem.Content = value;
				FocusChildId = EditItem.ItemID;
				FocusElementId = "";
				EditItem = null;
			}
		}

		void EditAbort(UIFocusEventArgs args, BoardItem item)
		{
			EditItem = null;
			FocusChildId = item.ItemID;
			FocusElementId = "";
		}

		void AddNewItem(int board)
		{
			NewBoardItem = board;
			FocusElementId = "newcard";
			FocusChildId = "";
		}
		void OnDragStart(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"Start {Data.Content} ");
			DragItem = Data;
			DragBoard = Data.BoardId;
			DragIndex = boardItems.IndexOf(DragItem);
			StateHasChanged();
		}

		void OnDragEnter(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"Enter {Data.Content} ");
			if (Data.Equals(DragItem))
			{
				return;
			}
			TargetItem = Data;
			int dragIndex = boardItems.IndexOf(DragItem);
			int targetIndex = boardItems.IndexOf(TargetItem);
			boardItems.Remove(DragItem);
			if (TargetItem.BoardId == DragItem.BoardId)
			{
				boardItems.Insert(targetIndex, DragItem);
			}
			else
			{
				boardItems.Insert(Math.Max(0, targetIndex - 1), DragItem);
			}
			DragItem.BoardId = TargetItem.BoardId;
			FocusChildId = DragItem.ItemID;
			FocusElementId = "";
			StateHasChanged();
		}

		void OnDragEnd(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"End {Data.Content} ");
			DragItem = null;
			StateHasChanged();
		}

		void OnDragLeave(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"Leave {Data.Content} ");
			StateHasChanged();
		}

		void OnDropItem(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"Drop {Data.Content}");
			DragItem = null;
			TargetItem = null;
			StateHasChanged();
		}

		void OnEnterBoard(UIDragEventArgs args, object Data)
		{
			Console.WriteLine($"Enter Board #{Data} ");
			if (int.TryParse(Data.ToString(), out int board))
			{
				DragItem.BoardId = board;
			}
			StateHasChanged();
		}

		void OnDropBoard(UIDragEventArgs args, object Data)
		{
			Console.WriteLine($"Drop Board #{Data}");
			if (int.TryParse(Data.ToString(), out int board))
			{
				DragItem.BoardId = board;
			}
			DragItem = null;
			TargetItem = null;
			StateHasChanged();
		}

		int DragIndex;
		int DragBoard;
		int NewBoardItem;
		string FocusElementId;
		string FocusChildId;
		string SearchTerm;
		string BlobUrl;
		string FileName = "unnamed";
		BoardItem EditItem;
		BoardItem DragItem;
		BoardItem TargetItem;
		List<string> boardTitles;
		List<BoardItem> boardItems;
		protected override void OnInit()
		{
			base.OnInit();
			boardTitles = BoardItem.SampleDataHeaders();
			boardItems = BoardItem.SampleData();

		}
		//
}