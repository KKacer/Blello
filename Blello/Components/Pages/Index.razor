@page "/"
@using Blello.Model
<!-- Masthead -->
<header class="masthead">

	<div class="boards-menu">

		<button class="boards-btn btn"><i class="fab fa-trello boards-btn-icon"></i>Boards</button>

		<div class="board-search">
			<input type="search" class="board-search-input" aria-label="Board Search" oninput="@BoardSearch" />
			<i class="fas fa-search search-icon" aria-hidden="true"></i>
		</div>

	</div>

	<div class="logo">

		<h1><i class="fab fa-trello logo-icon" aria-hidden="true"></i>Blello</h1>

	</div>

	<div class="user-settings">

		<a id="download" href="@BlobUrl" download="blello.json" style="display:none;" />
		<button class="user-settings-btn btn" aria-label="Save" onclick="@FileDownload">
			<i class="fas fa-download" aria-hidden="true"></i>
		</button>

		<input id="fileinput" type="file" hidden="hidden" onchange="window.filename.value = this.value; window.filename.dispatchEvent(new Event('change'));var reader = new FileReader(); reader.addEventListener('load', function () { var el = document.querySelector('#filedata'); el.value = this.result; el.dispatchEvent(new Event('change')); }, false); reader.readAsText(this.files[0]);" />
		<input id="filedata" hidden="hidden" bind=@FileUpload />
		<input id="filename" hidden="hidden" bind=@FileName />
		<button class="user-settings-btn btn" aria-label="Load" onclick="@FileUploader">
			<i class="fas fa-file-upload" aria-hidden="true"></i>
		</button>

	</div>

</header>
<!-- End of masthead -->
<!-- Board info bar -->
<section class="board-info-bar">

	<div class="board-controls">

		<button class="board-title btn">
			<h2>Web Development</h2>
		</button>

		<button class="star-btn btn" aria-label="Star Board">
			<i class="far fa-star" aria-hidden="true"></i>
		</button>
		<button class="personal-btn btn">Personal</button>

		<button class="private-btn btn"><i class="fas fa-briefcase private-btn-icon" aria-hidden="true"></i>Private</button>

	</div>
	<div class="logo"><h2>(@System.IO.Path.GetFileName(FileName))</h2></div>

	<button class="menu-btn btn"><i class="fas fa-ellipsis-h menu-btn-icon" aria-hidden="true"></i>Show Menu</button>

</section>
<!-- End of board info bar -->
<!-- Lists container -->
<section class="lists-container" onkeypress="@SelectBoard">

	@for (int i = 0; i < boardTitles.Count; i++)
	{
		int board = i + 1;
		<div class="list">

			<DropZone ActiveClass="droptarget" DataItem="board" OnDragDrop=@OnDropBoard OnDragEnter=@OnEnterBoard>
				<DropContent>
					<h3 class="list-title">@boardTitles[board - 1]</h3>
				</DropContent>
			</DropZone>

			<ul class="list-items">
				@foreach (var item in boardItems.Where(b => b.BoardId == board))
				{
					bool highlight = !(string.IsNullOrWhiteSpace(SearchTerm)) && item.Content.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase);
					@if (item.Equals(EditItem))
					{
						<li class="board-edit">
							<textarea id="@item.ItemID" rows="10" class="board-edit-input" onblur="@((e)=>EditAbort(e,item))" bind="@EditChange" aria-label="Edit Card" tabindex="0" />
						</li>
					}
					else
					{
						<Draggable ID="@item.ItemID" IsDragItem=@(item.Equals(DragItem)) DragItemClass="drag-item" DragType="move" DropType="move" DropTargetClass="droptarget" Debug="true" DataItem=@item OnDragStart=@OnDragStart OnDragEnd=@OnDragEnd OnDragDrop=@OnDropItem OnDragEnter=@OnDragEnter OnDragLeave=@OnDragLeave>
							<DragContent Context="dragctx">
								<li class="board-card @((highlight ? "highlight" : ""))" tabindex="@board" onclick="@((e) => EditCard(e, item))" onkeypress="@((e) => EditCard(e, item))">@dragctx.Content</li>
							</DragContent>
						</Draggable>
					}
				}
			</ul>

			@if (NewBoardItem == board)
			{
				<div class="board-new">
					<input id="newcard" type="text" class="board-new-input" bind="@NewItem" placeholder="Add a card" aria-label="New Card" tabindex="@board" />
					<i class="fas fa-plus new-icon"></i>
				</div>
			}
			else
			{
				<button class="add-card-btn btn" onclick="@(()=>AddNewItem(board))" tabindex="@board">Add a card</button>
			}

		</div>
	}


</section>
<!-- End of lists container -->
<Focus FocusElementId="@FocusElementId" FocusChildId="@FocusChildId" />

@functions
{
		[Inject] IJSRuntime jSRuntime { get; set; }
		[Inject] Microsoft.AspNetCore.Components.Services.IUriHelper UriHelper { get; set; }

		string FileUpload
		{
			get => "";
			set
			{
				try
				{
					var data = Json.Deserialize<List<BoardItem>>(value);
					boardItems = data;
					StateHasChanged();
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}
		}
		async Task FileUploader(UIMouseEventArgs args)
		{
			try
			{
				await jSRuntime.InvokeAsync<object>("eval", "var event = new MouseEvent('click', {view: window, bubbles: true, cancelable: true});fileinput.dispatchEvent(event);");
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
			}
		}
		async Task FileDownload(UIMouseEventArgs args)
		{
			try
			{
				var blob = $"URL.createObjectURL(new Blob(['{SafeJsString(Json.Serialize(boardItems))}'],{{ \"type\": \"text/json\"}}))";
				BlobUrl = await jSRuntime.InvokeAsync<string>("eval", blob);
				await Invoke(StateHasChanged);
				await Task.Delay(0);
				await jSRuntime.InvokeAsync<object>("eval", "var event = new MouseEvent('click', {view: window, bubbles: true, cancelable: true});download.dispatchEvent(event);");
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
			}
		}

		string SafeJsString(string content) =>
				content
				.Replace(@"\", @"\\")
				.Replace("\r", @"\r")
				.Replace("\n", @"\n")
				.Replace("'", @"\'")
				.Replace("\"", @"\""");

		void BoardSearch(UIChangeEventArgs args)
		{
			SearchTerm = args.Value.ToString();
		}
		void SelectBoard(UIKeyboardEventArgs args)
		{
			if (!(EditItem is null) || !(DragItem is null))
			{
				return;
			}
			if (int.TryParse(args.Key, out int board) && board <= boardTitles.Count)
			{
				var item = boardItems.First(b => b.BoardId == board);
				if (!(item is null))
				{
					FocusChildId = item.ItemID;
					FocusElementId = "";
				}
			}
		}
		void EditCard(UIEventArgs args, BoardItem item)
		{
			switch (args)
			{
				case UIMouseEventArgs e:
					EditItem = item;
					FocusElementId = item.ItemID;
					break;
				case UIKeyboardEventArgs k:
					if (k.Key == "Enter" || k.Key == "Space")
					{
						EditItem = item;
						FocusElementId = item.ItemID;
					}
					break;
			}
		}
		string NewItem
		{
			get => "";
			set
			{
				var newItem = new BoardItem() { BoardId = NewBoardItem, Content = value };
				boardItems.Add(newItem);
				NewBoardItem = 0;
				FocusChildId = newItem.ItemID;
				FocusElementId = "";
			}
		}

		string EditChange
		{
			get => EditItem.Content;
			set
			{
				EditItem.Content = value;
				FocusChildId = EditItem.ItemID;
				FocusElementId = "";
				EditItem = null;
			}
		}

		void EditAbort(UIFocusEventArgs args, BoardItem item)
		{
			EditItem = null;
			FocusChildId = item.ItemID;
			FocusElementId = "";
		}

		void AddNewItem(int board)
		{
			NewBoardItem = board;
			FocusElementId = "newcard";
			FocusChildId = "";
		}
		void OnDragStart(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"Start {Data.Content} ");
			DragItem = Data;
			DragBoard = Data.BoardId;
			DragIndex = boardItems.IndexOf(DragItem);
			StateHasChanged();
		}

		void OnDragEnter(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"Enter {Data.Content} ");
			if (Data.Equals(DragItem))
			{
				return;
			}
			TargetItem = Data;
			int dragIndex = boardItems.IndexOf(DragItem);
			int targetIndex = boardItems.IndexOf(TargetItem);
			boardItems.Remove(DragItem);
			if (TargetItem.BoardId == DragItem.BoardId)
			{
				boardItems.Insert(targetIndex, DragItem);
			}
			else
			{
				boardItems.Insert(Math.Max(0, targetIndex - 1), DragItem);
			}
			DragItem.BoardId = TargetItem.BoardId;
			FocusChildId = DragItem.ItemID;
			FocusElementId = "";
			StateHasChanged();
		}

		void OnDragEnd(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"End {Data.Content} ");
			DragItem = null;
			StateHasChanged();
		}

		void OnDragLeave(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"Leave {Data.Content} ");
			StateHasChanged();
		}

		void OnDropItem(UIDragEventArgs args, BoardItem Data)
		{
			Console.WriteLine($"Drop {Data.Content}");
			DragItem = null;
			TargetItem = null;
			StateHasChanged();
		}

		void OnEnterBoard(UIDragEventArgs args, object Data)
		{
			Console.WriteLine($"Enter Board #{Data} ");
			if (int.TryParse(Data.ToString(), out int board))
			{
				DragItem.BoardId = board;
			}
			StateHasChanged();
		}

		void OnDropBoard(UIDragEventArgs args, object Data)
		{
			Console.WriteLine($"Drop Board #{Data}");
			if (int.TryParse(Data.ToString(), out int board))
			{
				DragItem.BoardId = board;
			}
			DragItem = null;
			TargetItem = null;
			StateHasChanged();
		}

		int DragIndex;
		int DragBoard;
		int NewBoardItem;
		string FocusElementId;
		string FocusChildId;
		string SearchTerm;
		string BlobUrl;
		string FileName = "unnamed";
		BoardItem EditItem;
		BoardItem DragItem;
		BoardItem TargetItem;
		List<string> boardTitles;
		List<BoardItem> boardItems;
		protected override void OnInit()
		{
			base.OnInit();
			boardTitles = BoardItem.SampleDataHeaders();
			boardItems = BoardItem.SampleData();

		}
		//
}